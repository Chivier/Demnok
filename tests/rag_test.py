from demnok.agents import HFChatAgent, HFSimpleEmbeddingAgent
from demnok.engines import QdrantRAGEngine
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct, HnswConfigDiff
import torch
import json
from demnok.utils import SimpleTextChunker
import os

DATASET_DIR = "/home/jysc/ragchecker_benchmark/kiwi"
chunker = SimpleTextChunker()
# text = chunker.file_read(data)
# chunks = chunker.langchain_chunk(text)
chunks = []
corpus = []
with open(os.path.join(DATASET_DIR, 'corpus.jsonl'), 'r') as file:
    for line in file:
        corpus.append(json.loads(line)['text'])

for i, text in enumerate(corpus):
    sub_chunks = chunker.langchain_chunk(text)
    chunks.extend(sub_chunks)


embedding_agent = HFSimpleEmbeddingAgent(
    model_name="sentence-transformers/all-MiniLM-L12-v1",
    torch_dtype=torch.float32,
    chunks=chunks
    )

chat_agent = HFChatAgent(
    model_name="meta-llama/Llama-3.1-8B-Instruct",
    torch_dtype=torch.bfloat16
    )

client = QdrantClient(path="/home/jysc/qdrant-store")

collection_name = "pilot"
# embedding_store_name = "embedding_lst_serverlessllm.pkl"

if not client.collection_exists(collection_name):
    client.create_collection(
    collection_name=collection_name,
    vectors_config=VectorParams(size=1536, distance=Distance.COSINE),
    hnsw_config=HnswConfigDiff(
        m=50, 
        ef_construct=200,
        full_scan_threshold=10000
        )
    )

    embedding_lst = embedding_agent.get_corpus_w_mean_pooling()

    client.upsert(
        collection_name=collection_name,
        points=[
            PointStruct(
                id=i,
                vector=embedding
            )
            for i, embedding in enumerate(embedding_lst)
        ]
    )

engine = QdrantRAGEngine(embedding_agent, client, chat_agent, collection_name=collection_name)

answer = engine.rag("What are the prior approaches proposed to improve faithfulness of the reasoning steps generated by LLMs and what tasks are they applied on?", k=5)

print(answer[0])
# print("----------------------------------------------------------------------------------------------------")
# print(answer[1])

# chain.extend(answer)

# print("\n\n".join(chain))

# questions = [
#     '''
# Address the following question in a step-by-step manner: What is the capital of France?

# IMPORTANT: 
# - Structure each thought in paragraphs, ensuring each is clearly separated by ##. 
# - Refrain from using digits or numbered lists. Limit the response to a maximum of 4 paragraphs.
#     '''
# ]

# ans = agent.chat(questions)

# print(ans[0])